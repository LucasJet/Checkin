{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lucas\\\\Documents\\\\TAP\\\\checkin\\\\src\\\\hooks\\\\ToastContext.tsx\";\nimport React, { createContext, useContext, useCallback, useState } from 'react';\nimport { uuid } from 'uuidv4';\nimport ToastContainer from '../components/ToastContainer';\nconst ToastContext = createContext({});\n\nconst ToastProvider = ({\n  children\n}) => {\n  const [messages, setMessages] = useState([]);\n  const addToast = useCallback(({\n    type,\n    title,\n    description\n  }) => {\n    const id = uuid();\n    const toast = {\n      id,\n      type,\n      title,\n      description\n    };\n    setMessages(oldMessages => [...oldMessages, toast]);\n  }, []);\n  const removeToast = useCallback(id => {\n    setMessages(state => state.filter(message => message.id !== id));\n  }, []);\n  return /*#__PURE__*/React.createElement(ToastContext.Provider, {\n    value: {\n      addToast,\n      removeToast\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, children, /*#__PURE__*/React.createElement(ToastContainer, {\n    messages: messages,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }));\n};\n\nfunction useToast() {\n  const context = useContext(ToastContext);\n\n  if (!context) {\n    throw new Error('UseToast must be used within a ToastProvider');\n  }\n\n  return context;\n}\n\nexport { ToastProvider, useToast };","map":{"version":3,"sources":["C:/Users/lucas/Documents/TAP/checkin/src/hooks/ToastContext.tsx"],"names":["React","createContext","useContext","useCallback","useState","uuid","ToastContainer","ToastContext","ToastProvider","children","messages","setMessages","addToast","type","title","description","id","toast","oldMessages","removeToast","state","filter","message","useToast","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,UAA9B,EAA0CC,WAA1C,EAAuDC,QAAvD,QAAuE,OAAvE;AACA,SAAQC,IAAR,QAAmB,QAAnB;AAEA,OAAOC,cAAP,MAA2B,8BAA3B;AAcA,MAAMC,YAAY,GAAGN,aAAa,CAAkB,EAAlB,CAAlC;;AAEA,MAAMO,aAAuB,GAAE,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAgB;AAC3C,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BP,QAAQ,CAAiB,EAAjB,CAAxC;AAEA,QAAMQ,QAAQ,GAAGT,WAAW,CACxB,CAAC;AAACU,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,GAAD,KAA0D;AACtD,UAAMC,EAAE,GAAGX,IAAI,EAAf;AAEA,UAAMY,KAAK,GAAG;AACVD,MAAAA,EADU;AAEVH,MAAAA,IAFU;AAGVC,MAAAA,KAHU;AAIVC,MAAAA;AAJU,KAAd;AAMAJ,IAAAA,WAAW,CAACO,WAAW,IAAI,CAAC,GAAGA,WAAJ,EAAiBD,KAAjB,CAAhB,CAAX;AACH,GAXuB,EAYxB,EAZwB,CAA5B;AAeA,QAAME,WAAW,GAAGhB,WAAW,CAAEa,EAAD,IAAa;AACzCL,IAAAA,WAAW,CAACS,KAAK,IAAIA,KAAK,CAACC,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACN,EAAR,KAAeA,EAAvC,CAAV,CAAX;AACH,GAF8B,EAE5B,EAF4B,CAA/B;AAIA,sBACI,oBAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAACJ,MAAAA,QAAD;AAAWO,MAAAA;AAAX,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKV,QADL,eAEI,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CADJ;AAMH,CA5BD;;AA8BA,SAASa,QAAT,GAAoC;AAChC,QAAMC,OAAO,GAAGtB,UAAU,CAACK,YAAD,CAA1B;;AAEA,MAAI,CAACiB,OAAL,EAAa;AACT,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACH;;AAED,SAAOD,OAAP;AACH;;AAGD,SAAQhB,aAAR,EAAuBe,QAAvB","sourcesContent":["import React, {createContext, useContext, useCallback, useState } from 'react';\r\nimport {uuid} from 'uuidv4';\r\n\r\nimport ToastContainer from '../components/ToastContainer';\r\n\r\nexport interface ToastMessage{\r\n    id:string;\r\n    type?: 'success' | 'error' | 'info';\r\n    title: string;\r\n    description?: string;\r\n}\r\n\r\ninterface ToasContextData{\r\n    addToast(message: Omit<ToastMessage, 'id'>): void;\r\n    removeToast(id:string):void;\r\n}\r\n\r\nconst ToastContext = createContext<ToasContextData>({} as ToasContextData);\r\n\r\nconst ToastProvider: React.FC =({children}) => {\r\n    const [messages, setMessages] = useState<ToastMessage[]>([]);\r\n\r\n    const addToast = useCallback(\r\n        ({type, title, description}: Omit<ToastMessage, 'id'>) => {\r\n            const id = uuid();\r\n\r\n            const toast = {\r\n                id,\r\n                type,\r\n                title,\r\n                description,\r\n            };\r\n            setMessages(oldMessages => [...oldMessages, toast]);\r\n        },\r\n        [],\r\n    );\r\n\r\n    const removeToast = useCallback((id:string)=>{\r\n        setMessages(state => state.filter(message => message.id !== id));\r\n    }, []);\r\n\r\n    return(\r\n        <ToastContext.Provider value={{addToast, removeToast}}>\r\n            {children}\r\n            <ToastContainer messages={messages}/>\r\n         </ToastContext.Provider>\r\n    );\r\n};\r\n\r\nfunction useToast(): ToasContextData{\r\n    const context = useContext(ToastContext);\r\n\r\n    if (!context){\r\n        throw new Error('UseToast must be used within a ToastProvider');\r\n    }\r\n\r\n    return context;\r\n}\r\n\r\n\r\nexport {ToastProvider, useToast};"]},"metadata":{},"sourceType":"module"}