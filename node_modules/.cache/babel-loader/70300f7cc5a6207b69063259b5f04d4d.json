{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lucas\\\\Documents\\\\TAP\\\\checkin\\\\src\\\\components\\\\Input2\\\\index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\nimport { Container, Error } from './styles';\n\nconst Input = ({\n  label,\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n    setIsFilled(!!((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value));\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isErrored: !!error,\n    isFilled: isFilled,\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: handleInputFocus,\n    onBlur: handleInputBlur,\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  })), error && /*#__PURE__*/React.createElement(Error, {\n    title: error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FiAlertCircle, {\n    color: \"#ff9000\",\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 11\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["C:/Users/lucas/Documents/TAP/checkin/src/components/Input2/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","FiAlertCircle","useField","Container","Error","Input","label","name","icon","Icon","rest","inputRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","handleInputFocus","handleInputBlur","current","value","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAEEC,SAFF,EAGEC,MAHF,EAIEC,QAJF,EAKEC,WALF,QAMO,OANP;AAQA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,EAAoBC,KAApB,QAAiC,UAAjC;;AAQA,MAAMC,KAA2B,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA,IAAT;AAAeC,EAAAA,IAAI,EAAEC,IAArB;AAA2B,KAAGC;AAA9B,CAAD,KAA0C;AAC5E,QAAMC,QAAQ,GAAGb,MAAM,CAAmB,IAAnB,CAAvB;AAEA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAEiB,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDjB,QAAQ,CAACK,IAAD,CAAlE;AAEA,QAAMa,gBAAgB,GAAGpB,WAAW,CAAC,MAAM;AACzCa,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,GAFmC,EAEjC,EAFiC,CAApC;AAIA,QAAMQ,eAAe,GAAGrB,WAAW,CAAC,MAAM;AAAA;;AACxCa,IAAAA,YAAY,CAAC,KAAD,CAAZ;AAEAE,IAAAA,WAAW,CAAC,CAAC,uBAACJ,QAAQ,CAACW,OAAV,sDAAC,kBAAkBC,KAAnB,CAAF,CAAX;AACD,GAJkC,EAIhC,EAJgC,CAAnC;AAMA1B,EAAAA,SAAS,CAAC,MAAM;AACdsB,IAAAA,aAAa,CAAC;AACZZ,MAAAA,IAAI,EAAES,SADM;AAEZQ,MAAAA,GAAG,EAAEb,QAAQ,CAACW,OAFF;AAGZG,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAE,CAAC,CAACD,KAAxB;AAA+B,IAAA,QAAQ,EAAEJ,QAAzC;AAAmD,IAAA,SAAS,EAAEF,SAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADX,eAEE;AAAO,IAAA,OAAO,EAAEF,IAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuBD,KAAvB,CAFF,eAGE;AACE,IAAA,OAAO,EAAEc,gBADX;AAEE,IAAA,MAAM,EAAEC,eAFV;AAGE,IAAA,YAAY,EAAEJ,YAHhB;AAIE,IAAA,GAAG,EAAEN;AAJP,KAKMD,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAHF,EAWGQ,KAAK,iBACJ,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAEA,KAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,KAAK,EAAC,SAArB;AAA+B,IAAA,IAAI,EAAE,EAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAZJ,CADF;AAmBD,CA5CD;;AA8CA,eAAeb,KAAf","sourcesContent":["import React, {\n  InputHTMLAttributes,\n  useEffect,\n  useRef,\n  useState,\n  useCallback,\n} from 'react';\nimport { IconBaseProps } from 'react-icons';\nimport { FiAlertCircle } from 'react-icons/fi';\nimport { useField } from '@unform/core';\n\nimport { Container, Error } from './styles';\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n  label?: string;\n}\n\nconst Input: React.FC<InputProps> = ({ label, name, icon: Icon, ...rest }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputFocus = useCallback(() => {\n    setIsFocused(true);\n  }, []);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false);\n\n    setIsFilled(!!inputRef.current?.value);\n  }, []);\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value',\n    });\n  }, [fieldName, registerField]);\n\n  return (\n    <Container isErrored={!!error} isFilled={isFilled} isFocused={isFocused}>\n      {Icon && <Icon size={20} />}\n      <label htmlFor={name}>{label}</label>\n      <input\n        onFocus={handleInputFocus}\n        onBlur={handleInputBlur}\n        defaultValue={defaultValue}\n        ref={inputRef}\n        {...rest}\n      />\n\n      {error && (\n        <Error title={error}>\n          <FiAlertCircle color=\"#ff9000\" size={20} />\n        </Error>\n      )}\n    </Container>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}